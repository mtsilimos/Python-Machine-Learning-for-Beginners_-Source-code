from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

from google.colab import drive

drive.mount('/content/drive')


import pandas as pd # import the pandas library as pd 
df = pd.read_csv('/content/drive/My Drive/bbc_data.csv')

df.head()

X = df['text']
y = df['class']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer()

X_train_vectorized = cv.fit_transform(X_train)
X_test_vectorized = cv.transform(X_test)

classifier =RandomForestClassifier() 
classifier.fit(X_train_vectorized, y_train)

y_pred = classifier.predict(X_test_vectorized)

print("Test accuracy:", accuracy_score(y_test, y_pred))


y_pred = classifier.predict(X_train_vectorized)

print("Train accuracy:", accuracy_score(y_train, y_pred))



# 1. Define your new, unseen data
new_data_texts = [
    "Apple is set to release a new iPhone model later this year with advanced camera features.",
    "The central bank announced an interest rate hike, causing market fluctuations.",
    "A new study reveals a link between climate change and extreme weather events.",
    "Novak Djokovic won his latest tennis Grand Slam title, showcasing his dominance.",
    "Hollywood movie revenues soared this quarter, driven by popular superhero films."
]


# 2. Vectorize the new data 
new_data_vectorized = cv.transform(new_data_texts)


# 3. Get predictions from your trained classifier
predictions_on_new_data = classifier.predict(new_data_vectorized)

print("\nPredictions for new data:")
for i, text in enumerate(new_data_texts):
    print(f"Text: '{text}'")
    print(f"Predicted Category: {predictions_on_new_data[i]}\n")

# If you want to see prediction probabilities (useful for confidence):
prediction_probabilities = classifier.predict_proba(new_data_vectorized)
print("\nPrediction Probabilities for new data:")
for i, text in enumerate(new_data_texts):
    print(f"Text: '{text}'")
    # Get the class labels from the classifier (e.g., ['business', 'tech', ...])
    class_labels = classifier.classes_
    print("Probabilities:")
    for j, prob in enumerate(prediction_probabilities[i]):
        print(f"  {class_labels[j]}: {prob:.4f}")
    print()


